// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package sqlc

import (
	"context"
)

// iteratorForInsertBooks implements pgx.CopyFromSource.
type iteratorForInsertBooks struct {
	rows                 []InsertBooksParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertBooks) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertBooks) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Isbn,
		r.rows[0].Title,
		r.rows[0].Author,
		r.rows[0].Publisher,
		r.rows[0].Publicationyear,
		r.rows[0].Setisbn,
		r.rows[0].Additionalcode,
		r.rows[0].Volume,
		r.rows[0].Subjectcode,
		r.rows[0].Bookcount,
		r.rows[0].Loancount,
		r.rows[0].Registrationdate,
	}, nil
}

func (r iteratorForInsertBooks) Err() error {
	return nil
}

func (q *Queries) InsertBooks(ctx context.Context, arg []InsertBooksParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"books"}, []string{"isbn", "title", "author", "publisher", "publicationyear", "setisbn", "additionalcode", "volume", "subjectcode", "bookcount", "loancount", "registrationdate"}, &iteratorForInsertBooks{rows: arg})
}

// iteratorForInsertLibraries implements pgx.CopyFromSource.
type iteratorForInsertLibraries struct {
	rows                 []InsertLibrariesParams
	skippedFirstNextCall bool
}

func (r *iteratorForInsertLibraries) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForInsertLibraries) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].Libcode,
		r.rows[0].Libname,
		r.rows[0].Libaddress,
		r.rows[0].Tel,
		r.rows[0].Latitude,
		r.rows[0].Longtitude,
		r.rows[0].Homepage,
		r.rows[0].Closed,
		r.rows[0].Operatingtime,
		r.rows[0].Bookcount,
	}, nil
}

func (r iteratorForInsertLibraries) Err() error {
	return nil
}

func (q *Queries) InsertLibraries(ctx context.Context, arg []InsertLibrariesParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"libraries"}, []string{"libcode", "libname", "libaddress", "tel", "latitude", "longtitude", "homepage", "closed", "operatingtime", "bookcount"}, &iteratorForInsertLibraries{rows: arg})
}
