// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: embedding.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
	"github.com/pgvector/pgvector-go"
)

const searchQuery = `-- name: SearchQuery :many
SELECT b.title,b.author, embedding <=> $1 as sim
FROM BookEmbedding e
JOIN books b
ON b.isbn = e.isbn
ORDER BY embedding <=> $1 ASC
LIMIT 50
`

type SearchQueryRow struct {
	Title  pgtype.Text
	Author pgtype.Text
	Sim    interface{}
}

func (q *Queries) SearchQuery(ctx context.Context, embedding pgvector.Vector) ([]SearchQueryRow, error) {
	rows, err := q.db.Query(ctx, searchQuery, embedding)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchQueryRow
	for rows.Next() {
		var i SearchQueryRow
		if err := rows.Scan(&i.Title, &i.Author, &i.Sim); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
